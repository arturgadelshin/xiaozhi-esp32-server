# core/providers/llm/ollama/ollama.py

from config.logger import setup_logging
from openai import OpenAI
import json
from core.providers.llm.base import LLMProviderBase

TAG = __name__
logger = setup_logging()


class LLMProvider(LLMProviderBase):
    def __init__(self, config):
        self.model_name = config.get("model_name")
        self.base_url = config.get("base_url", "http://localhost:11434")

        # –î–æ–±–∞–≤–ª—è–µ–º /v1, –µ—Å–ª–∏ –Ω–µ—Ç
        if not self.base_url.endswith("/v1"):
            self.base_url = f"{self.base_url}/v1"

        self.client = OpenAI(
            base_url=self.base_url,
            api_key="ollama",  # Ollama –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á, –Ω–æ OpenAI client —Ç—Ä–µ–±—É–µ—Ç
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–¥–µ–ª—å –ª–∏ —ç—Ç–æ qwen3
        self.is_qwen3 = self.model_name and self.model_name.lower().startswith("qwen3")

    def response(self, session_id, dialogue, **kwargs):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
        """
        try:
            # üîπ –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.bind(tag=TAG).debug(f"üìù –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
            logger.bind(tag=TAG).debug(f"üí¨ –î–∏–∞–ª–æ–≥ (–≤—Ö–æ–¥): {dialogue}")

            # üî• –õ–û–ì–ò–†–£–ï–ú –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢, –ö–û–¢–û–†–´–ô –ü–û–ô–î–Å–¢ –í OLLAMA
            full_prompt = "\n".join([f"{msg['role']}: {msg['content']}" for msg in dialogue])
            logger.bind(tag=TAG).info(f"üì§ –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢ –î–û OLLAMA:\n{full_prompt}")

            # –ï—Å–ª–∏ —ç—Ç–æ qwen3 ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º /no_think
            if self.is_qwen3:
                dialogue_copy = dialogue.copy()
                for i in range(len(dialogue_copy) - 1, -1, -1):
                    if dialogue_copy[i]["role"] == "user":
                        dialogue_copy[i]["content"] = "/no_think " + dialogue_copy[i]["content"]
                        logger.bind(tag=TAG).debug(f"üîß –î–æ–±–∞–≤–ª–µ–Ω /no_think –¥–ª—è qwen3")
                        break
                dialogue = dialogue_copy

            # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            responses = self.client.chat.completions.create(
                model=self.model_name,
                messages=dialogue,
                stream=True
            )

            is_active = True  # –§–ª–∞–≥: –≤–Ω—É—Ç—Ä–∏ <think> –∏–ª–∏ –Ω–µ—Ç
            buffer = ""       # –ë—É—Ñ–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞

            for chunk in responses:
                try:
                    delta = chunk.choices[0].delta if getattr(chunk, "choices", None) else None
                    content = delta.content if hasattr(delta, "content") else ""
                    finish_reason = chunk.choices[0].finish_reason if hasattr(chunk.choices[0], "finish_reason") else None

                    # üîπ –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π —á–∞–Ω–∫
                    logger.bind(tag=TAG).trace(f"üì¶ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫: content='{content}', finish_reason='{finish_reason}'")

                    if content:
                        buffer += content

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤ <think>
                        while "<think>" in buffer and "</think>" in buffer:
                            pre = buffer.split("<think>", 1)[0]
                            post = buffer.split("</think>", 1)[1]
                            buffer = pre + post
                            logger.bind(tag=TAG).debug("üóëÔ∏è –£–¥–∞–ª—ë–Ω –±–ª–æ–∫ <think>...<think>")

                        if "<think>" in buffer:
                            is_active = False
                            buffer = buffer.split("<think>", 1)[0]
                            logger.bind(tag=TAG).debug("‚è∏Ô∏è –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º <think> (—Ç–µ–∫—Å—Ç –Ω–µ –æ–∑–≤—É—á–∏–≤–∞–µ—Ç—Å—è)")

                        if "</think>" in buffer:
                            is_active = True
                            buffer = buffer.split("</think>", 1)[1]
                            logger.bind(tag=TAG).debug("‚ñ∂Ô∏è –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ <think> (–æ–∑–≤—É—á–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞)")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç
                        if is_active and buffer.strip():
                            logger.bind(tag=TAG).info(f"üîä –í—ã—Ö–æ–¥–Ω–æ–π —á–∞–Ω–∫: '{buffer}'")
                            yield buffer
                            buffer = ""

                    # –ö–æ–Ω–µ—Ü –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    if finish_reason:
                        if buffer.strip():
                            logger.bind(tag=TAG).info(f"üîö –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫: '{buffer}'")
                            yield buffer
                        logger.bind(tag=TAG).debug(f"üèÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø—Ä–∏—á–∏–Ω–∞: {finish_reason})")
                        break

                except Exception as e:
                    logger.bind(tag=TAG).error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞: {e}")
                    continue

        except Exception as e:
            error_msg = "„ÄêOllama: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è„Äë"
            logger.bind(tag=TAG).error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            yield error_msg

    def response_with_functions(self, session_id, dialogue, functions=None):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (tools)
        """
        try:
            logger.bind(tag=TAG).debug(f"üîß –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
            logger.bind(tag=TAG).debug(f"üí¨ –î–∏–∞–ª–æ–≥: {dialogue}")
            if functions:
                logger.bind(tag=TAG).debug(f"üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[f['function']['name'] for f in functions]}")

            # üî• –õ–û–ì–ò–†–£–ï–ú –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢ –° –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú–ò
            full_prompt = "\n".join([f"{msg['role']}: {msg['content']}" for msg in dialogue])
            logger.bind(tag=TAG).info(f"üì§ –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢ –° –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú–ò:\n{full_prompt}")
            if functions:
                logger.bind(tag=TAG).info(f"üõ†Ô∏è –ó–ê–ü–†–û–®–ï–ù–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: {[f['function']['name'] for f in functions]}")

            # –î–ª—è qwen3 –¥–æ–±–∞–≤–ª—è–µ–º /no_think
            if self.is_qwen3:
                dialogue_copy = dialogue.copy()
                for i in range(len(dialogue_copy) - 1, -1, -1):
                    if dialogue_copy[i]["role"] == "user":
                        dialogue_copy[i]["content"] = "/no_think " + dialogue_copy[i]["content"]
                        logger.bind(tag=TAG).debug("üîß –î–æ–±–∞–≤–ª–µ–Ω /no_think –¥–ª—è qwen3")
                        break
                dialogue = dialogue_copy

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å tools
            stream = self.client.chat.completions.create(
                model=self.model_name,
                messages=dialogue,
                stream=True,
                tools=functions,
            )

            is_active = True
            buffer = ""

            for chunk in stream:
                try:
                    delta = chunk.choices[0].delta if getattr(chunk, "choices", None) else None
                    content = delta.content if hasattr(delta, "content") else None
                    tool_calls = delta.tool_calls if hasattr(delta, "tool_calls") else None
                    finish_reason = chunk.choices[0].finish_reason if hasattr(chunk.choices[0], "finish_reason") else None

                    logger.bind(tag=TAG).trace(f"üì¶ –ß–∞–Ω–∫: content='{content}', tool_calls={tool_calls}, finish_reason='{finish_reason}'")

                    # üîß –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º tool_calls
                    if tool_calls:
                        logger.bind(tag=TAG).info(f"üõ†Ô∏è –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_calls}")
                        yield None, tool_calls
                        continue

                    # üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                    if content:
                        buffer += content

                        while "<think>" in buffer and "</think>" in buffer:
                            pre = buffer.split("<think>", 1)[0]
                            post = buffer.split("</think>", 1)[1]
                            buffer = pre + post

                        if "<think>" in buffer:
                            is_active = False
                            buffer = buffer.split("<think>", 1)[0]

                        if "</think>" in buffer:
                            is_active = True
                            buffer = buffer.split("</think>", 1)[1]

                        if is_active and buffer.strip():
                            logger.bind(tag=TAG).info(f"üîä –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞–Ω–∫: '{buffer}'")
                            yield buffer, None
                            buffer = ""

                    if finish_reason and buffer.strip():
                        logger.bind(tag=TAG).info(f"üîö –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: '{buffer}'")
                        yield buffer, None

                except Exception as e:
                    logger.bind(tag=TAG).error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏: {e}")
                    continue

        except Exception as e:
            error_msg = f"„ÄêOllama: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {str(e)}„Äë"
            logger.bind(tag=TAG).error(error_msg)
            yield error_msg, None