import time
import wave
import os
import sys
import io
from config.logger import setup_logging
from typing import Optional, Tuple, List
from core.providers.asr.dto.dto import InterfaceType
from core.providers.asr.base import ASRProviderBase

import numpy as np
import sherpa_onnx

TAG = __name__
logger = setup_logging()


# –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç ONNX)
class CaptureOutput:
    def __enter__(self):
        self._output = io.StringIO()
        self._original_stdout = sys.stdout
        sys.stdout = self._output
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        sys.stdout = self._original_stdout
        output = self._output.getvalue()
        self._output.close()
        if output.strip():
            logger.bind(tag=TAG).info(output.strip())


class ASRProvider(ASRProviderBase):
    def __init__(self, config: dict, delete_audio_file: bool):
        super().__init__()
        self.interface_type = InterfaceType.LOCAL
        self.model_dir = config.get("model_dir")
        self.output_dir = config.get("output_dir")
        self.model_type = config.get("model_type", "transducer")
        self.delete_audio_file = delete_audio_file

        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.makedirs(self.output_dir, exist_ok=True)

        # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏
        self.encoder_path = os.path.join(self.model_dir, "encoder.int8.onnx")
        self.decoder_path = os.path.join(self.model_dir, "decoder.int8.onnx")
        self.joiner_path = os.path.join(self.model_dir, "joiner.int8.onnx")
        self.tokens_path = os.path.join(self.model_dir, "tokens.txt")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path, name in [
            (self.encoder_path, "Encoder"),
            (self.decoder_path, "Decoder"),
            (self.joiner_path, "Joiner"),
            (self.tokens_path, "Tokens"),
        ]:
            if not os.path.isfile(path):
                raise FileNotFoundError(f"{name}-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        with CaptureOutput():
            try:
                self.model = sherpa_onnx.OfflineRecognizer.from_transducer(
                    encoder=self.encoder_path,
                    decoder=self.decoder_path,
                    joiner=self.joiner_path,
                    tokens=self.tokens_path,
                    num_threads=4,
                    sample_rate=16000,
                    feature_dim=80,
                    decoding_method="greedy_search",
                    debug=False,
                )
                logger.bind(tag=TAG).info("‚úÖ –ú–æ–¥–µ–ª—å ASR —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                logger.bind(tag=TAG).error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
                raise

        logger.bind(tag=TAG).info("‚úÖ –ú–æ–¥–µ–ª—å ASR —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")

    def read_wave(self, wave_filename: str) -> tuple[np.ndarray, int]:
        with wave.open(wave_filename) as f:
            assert f.getnchannels() == 1, f.getnchannels()
            assert f.getsampwidth() == 2, f.getsampwidth()
            num_samples = f.getnframes()
            samples = f.readframes(num_samples)
            samples_int16 = np.frombuffer(samples, dtype=np.int16)
            samples_float32 = samples_int16.astype(np.float32) / 32768.0
            return samples_float32, f.getframerate()

    async def speech_to_text(
            self, opus_data: List[bytes], session_id: str, audio_format="opus"
    ) -> Tuple[Optional[str], Optional[str]]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: Opus ‚Üí PCM ‚Üí –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ"""
        file_path = None
        try:
            start_time = time.time()

            # üîΩüîΩüîΩ –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –õ–û–ì: –°–∫–æ–ª—å–∫–æ –±–∞–π—Ç –ø—Ä–∏—à–ª–æ
            total_bytes = sum(len(chunk) for chunk in opus_data)
            logger.bind(tag=TAG).info("ASR processing audio: %d bytes", total_bytes)

            if total_bytes == 0:
                logger.bind(tag=TAG).error("–ü–æ–ª—É—á–µ–Ω–æ 0 –±–∞–π—Ç –∞—É–¥–∏–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞")
                return "", None
            # üîºüîºüîº

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Opus –≤ PCM
            if audio_format == "pcm":
                pcm_data = b"".join(opus_data)
            else:
                from core.utils.util import decode_opus
                pcm_data = decode_opus(opus_data)

            if not pcm_data:
                logger.bind(tag=TAG).error("–ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                return "", None

        except Exception as e:
            logger.bind(tag=TAG).error(f"–û—à–∏–±–∫–∞ ASR: {e}")
            return "", file_path
        finally:
            if self.delete_audio_file and file_path and os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except Exception as e:
                    logger.bind(tag=TAG).error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def transcribe_pcm(self, pcm_data: bytes, sample_rate: int = 16000) -> str:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ PCM-–∞—É–¥–∏–æ (16-–±–∏—Ç, –º–æ–Ω–æ) –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª.
        """
        if not pcm_data or len(pcm_data) == 0:
            return ""

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–ª–∏–Ω–∞ –∫—Ä–∞—Ç–Ω–∞ 2 (16 –±–∏—Ç = 2 –±–∞–π—Ç–∞)
        if len(pcm_data) % 2 != 0:
            pcm_data = pcm_data[:-1]

        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ float32 [-1.0, 1.0]
            samples_int16 = np.frombuffer(pcm_data, dtype=np.int16)
            samples_float32 = samples_int16.astype(np.float32) / 32768.0

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã
            if sample_rate != 16000:
                logger.bind(tag=TAG).warning(
                    f"–ß–∞—Å—Ç–æ—Ç–∞ {sample_rate} –ì—Ü –Ω–µ —Ä–∞–≤–Ω–∞ 16 –∫–ì—Ü. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º."
                )

            # –°–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º
            stream = self.model.create_stream()
            stream.accept_waveform(16000, samples_float32)
            self.model.decode_stream(stream)
            text = stream.result.text.strip()
            return text

        except Exception as e:
            logger.bind(tag=TAG).error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ PCM: {e}")
            return ""

    def save_audio_to_file(self, pcm_data: bytes, session_id: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç PCM –≤ .wav (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
        file_path = os.path.join(self.output_dir, f"{session_id}.wav")
        with wave.open(file_path, "wb") as f:
            f.setnchannels(1)  # –º–æ–Ω–æ
            f.setsampwidth(2)  # 16 –±–∏—Ç = 2 –±–∞–π—Ç–∞
            f.setframerate(16000)
            f.writeframes(pcm_data)
        return file_path

    async def speech_to_text(
        self, opus_data: List[bytes], session_id: str, audio_format="opus"
    ) -> Tuple[Optional[str], Optional[str]]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: Opus ‚Üí PCM ‚Üí –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ"""
        file_path = None
        try:
            start_time = time.time()

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Opus –≤ PCM
            if audio_format == "pcm":
                pcm_data = b"".join(opus_data)
            else:
                from core.utils.util import decode_opus  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
                pcm_data = decode_opus(opus_data)

            if not pcm_data:
                logger.bind(tag=TAG).error("–ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                return "", None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            if self.delete_audio_file:
                file_path = self.save_audio_to_file(pcm_data, session_id)

            # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ PCM
            text = self.transcribe_pcm(pcm_data, sample_rate=16000)

            logger.bind(tag=TAG).debug(
                f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {time.time() - start_time:.3f} —Å | –¢–µ–∫—Å—Ç: '{text}'"
            )
            return text, file_path

        except Exception as e:
            logger.bind(tag=TAG).error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}", exc_info=True)
            return "", file_path

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if self.delete_audio_file and file_path and os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    logger.bind(tag=TAG).debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {file_path}")
                except Exception as e:
                    logger.bind(tag=TAG).error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")