import json
import time
from core.handle.abortHandle import handleAbortMessage
from core.handle.helloHandle import handleHelloMessage
from core.providers.tools.device_mcp import handle_mcp_message
from core.utils.util import remove_punctuation_and_length, filter_sensitive_info
from core.handle.receiveAudioHandle import startToChat, handleAudioMessage
from core.handle.sendAudioHandle import send_stt_message, send_tts_message
from core.providers.tools.device_iot import handleIotDescriptors, handleIotStatus
from core.handle.reportHandle import enqueue_asr_report
import asyncio

TAG = __name__


async def handleTextMessage(conn, message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (ESP32)"""
    try:
        msg_json = json.loads(message)

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π)
        if isinstance(msg_json, int):
            conn.logger.bind(tag=TAG).info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            await conn.websocket.send(message)
            return

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        if msg_json["type"] == "hello":
            conn.logger.bind(tag=TAG).info(f"–ü–æ–ª—É—á–µ–Ω–æ hello-—Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            await handleHelloMessage(conn, msg_json)

        # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        elif msg_json["type"] == "abort":
            conn.logger.bind(tag=TAG).info(f"–ü–æ–ª—É—á–µ–Ω–æ abort-—Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            await handleAbortMessage(conn)

        # –°–æ–±—ã—Ç–∏–µ "—Å–ª—É—à–∞—Ç—å" ‚Äî –Ω–∞—á–∞–ª–æ/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
        elif msg_json["type"] == "listen":
            conn.logger.bind(tag=TAG).info(f"–ü–æ–ª—É—á–µ–Ω–æ listen-—Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

            # –†–µ–∂–∏–º –∑–∞—Ö–≤–∞—Ç–∞ –∑–≤—É–∫–∞ (—Ä—É—á–Ω–æ–π/–∞–≤—Ç–æ)
            if "mode" in msg_json:
                conn.client_listen_mode = msg_json["mode"]
                conn.logger.bind(tag=TAG).debug(f"–†–µ–∂–∏–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {conn.client_listen_mode}")

            # –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ ‚Äî –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
            if msg_json["state"] == "start":
                conn.client_have_voice = True
                conn.client_voice_stop = False
                conn.asr_audio.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                conn.logger.bind(tag=TAG).debug("üéôÔ∏è –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏. –ë—É—Ñ–µ—Ä –∞—É–¥–∏–æ –æ—á–∏—â–µ–Ω.")

            # –û–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            elif msg_json["state"] == "stop":
                conn.client_have_voice = True
                conn.client_voice_stop = True
                conn.logger.bind(tag=TAG).debug(f"‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {len(conn.asr_audio)} –±–∞–π—Ç")

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                if len(conn.asr_audio) > 0:
                    await handleAudioMessage(conn, b"")  # –ü–µ—Ä–µ–¥–∞—ë–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –±—É—Ñ–µ—Ä —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
                else:
                    conn.logger.bind(tag=TAG).warning("‚ùå –ê—É–¥–∏–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî –±—É—Ñ–µ—Ä –ø—É—Å—Ç.")

            # –†–µ–∂–∏–º –¥–µ—Ç–µ–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, wake-word)
            elif msg_json["state"] == "detect":
                conn.client_have_voice = False
                conn.asr_audio.clear()

                if "text" in msg_json:
                    original_text = msg_json["text"]
                    filtered_len, filtered_text = remove_punctuation_and_length(original_text)
                    is_wakeup_words = filtered_text in conn.config.get("wakeup_words", [])
                    enable_greeting = conn.config.get("enable_greeting", True)

                    if is_wakeup_words and not enable_greeting:
                        await send_stt_message(conn, original_text)
                        await send_tts_message(conn, "stop", None)
                        conn.client_is_speaking = False
                    elif is_wakeup_words:
                        conn.just_woken_up = True
                        enqueue_asr_report(conn, "–ü—Ä–∏–≤–µ—Ç!", [])
                        await startToChat(conn, "–ü—Ä–∏–≤–µ—Ç!")
                    else:
                        enqueue_asr_report(conn, original_text, [])
                        await startToChat(conn, original_text)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ IoT-—É—Å—Ç—Ä–æ–π—Å—Ç–≤
        elif msg_json["type"] == "iot":
            conn.logger.bind(tag=TAG).info(f"–ü–æ–ª—É—á–µ–Ω–æ iot-—Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            if "descriptors" in msg_json:
                asyncio.create_task(handleIotDescriptors(conn, msg_json["descriptors"]))
            if "states" in msg_json:
                asyncio.create_task(handleIotStatus(conn, msg_json["states"]))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ MCP (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
        elif msg_json["type"] == "mcp":
            conn.logger.bind(tag=TAG).info(f"–ü–æ–ª—É—á–µ–Ω–æ mcp-—Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}")
            if "payload" in msg_json:
                asyncio.create_task(handle_mcp_message(conn, conn.mcp_client, msg_json["payload"]))

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º (API)
        elif msg_json["type"] == "server":
            conn.logger.bind(tag=TAG).info(f"–ü–æ–ª—É—á–µ–Ω–æ server-—Å–æ–æ–±—â–µ–Ω–∏–µ: {filter_sensitive_info(msg_json)}")

            if not conn.read_config_from_api:
                return

            post_secret = msg_json.get("content", {}).get("secret", "")
            secret = conn.config["manager-api"].get("secret", "")

            if post_secret != secret:
                await conn.websocket.send(json.dumps({
                    "type": "server",
                    "status": "error",
                    "message": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞"
                }))
                return

            if msg_json["action"] == "update_config":
                try:
                    if not conn.server or not await conn.server.update_config():
                        await conn.websocket.send(json.dumps({
                            "type": "server",
                            "status": "error",
                            "message": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                        }))
                        return
                    await conn.websocket.send(json.dumps({
                        "type": "server",
                        "status": "success",
                        "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                    }))
                except Exception as e:
                    conn.logger.bind(tag=TAG).error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                    await conn.websocket.send(json.dumps({
                        "type": "server",
                        "status": "error",
                        "message": f"–û—à–∏–±–∫–∞: {str(e)}"
                    }))

            elif msg_json["action"] == "restart":
                await conn.handle_restart(msg_json)

        else:
            conn.logger.bind(tag=TAG).error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")

    except json.JSONDecodeError:
        await conn.websocket.send(message)