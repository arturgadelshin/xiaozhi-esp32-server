"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ (–ø—Ä–æ–º–ø—Ç–∞–º–∏)
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤,
–≤–∫–ª—é—á–∞—è –±—ã—Å—Ç—Ä—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–±–æ—Ä–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import os
import cnlunar
from typing import Dict, Any
from config.logger import setup_logging
from jinja2 import Template

TAG = __name__

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏
WEEKDAY_MAP = {
    "Monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "—Å—Ä–µ–¥–∞",
    "Thursday": "—á–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ø—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "—Å—É–±–±–æ—Ç–∞",
    "Sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}

# –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–∞—Ö)
EMOJI_List = [
    "üò∂", "üôÇ", "üòÜ", "üòÇ", "üòî", "üò†", "üò≠", "üòç", "üò≥", "üò≤",
    "üò±", "ü§î", "üòâ", "üòé", "üòå", "ü§§", "üòò", "üòè", "üò¥", "üòú", "üôÑ"
]


class PromptManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ò–ò"""

    def __init__(self, config: Dict[str, Any], logger=None):
        self.config = config
        self.logger = logger or setup_logging()
        self.base_prompt_template = None  # –®–∞–±–ª–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        self.last_update_time = 0

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞
        from core.utils.cache.manager import cache_manager, CacheType

        self.cache_manager = cache_manager
        self.CacheType = CacheType

        self._load_base_template()

    def _load_base_template(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            template_path = "agent-base-prompt.txt"
            cache_key = f"prompt_template:{template_path}"

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_template = self.cache_manager.get(self.CacheType.CONFIG, cache_key)
            if cached_template is not None:
                self.base_prompt_template = cached_template
                self.logger.bind(tag=TAG).debug("–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞")
                return

            # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            if os.path.exists(template_path):
                with open(template_path, "r", encoding="utf-8") as f:
                    template_content = f.read()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (–∫—ç—à —Ç–∏–ø–∞ CONFIG –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                self.cache_manager.set(
                    self.CacheType.CONFIG, cache_key, template_content
                )
                self.base_prompt_template = template_content
                self.logger.bind(tag=TAG).debug("–ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω")
            else:
                self.logger.bind(tag=TAG).warning("–§–∞–π–ª agent-base-prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.logger.bind(tag=TAG).error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {e}")

    def get_quick_prompt(self, user_prompt: str, device_id: str = None) -> str:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)"""
        device_cache_key = f"device_prompt:{device_id}"
        cached_device_prompt = self.cache_manager.get(
            self.CacheType.DEVICE_PROMPT, device_cache_key
        )
        if cached_device_prompt is not None:
            self.logger.bind(tag=TAG).debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}")
            return cached_device_prompt
        else:
            self.logger.bind(tag=TAG).debug(
                f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –∏–º–µ–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
            )

        # –ö—ç—à–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω device_id)
        if device_id:
            device_cache_key = f"device_prompt:{device_id}"
            self.cache_manager.set(self.CacheType.CONFIG, device_cache_key, user_prompt)
            self.logger.bind(tag=TAG).debug(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à")

        self.logger.bind(tag=TAG).info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–º–ø—Ç: {user_prompt[:50]}...")
        return user_prompt

    def _get_current_time_info(self) -> tuple:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"""
        from datetime import datetime

        now = datetime.now()
        today_date = now.strftime("%Y-%m-%d")
        today_weekday = WEEKDAY_MAP[now.strftime("%A")]
        today_lunar = cnlunar.Lunar(now, godType="8char")
        lunar_date = "%s–≤–æ–∑—Ä–∞—Å—Ç%s%s\n" % (
            today_lunar.lunarYearCn,
            today_lunar.lunarMonthCn[:-1],
            today_lunar.lunarDayCn,
        )

        return today_date, today_weekday, lunar_date

    def _get_location_info(self, client_ip: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–æ IP"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_location = self.cache_manager.get(self.CacheType.LOCATION, client_ip)
            if cached_location is not None:
                return cached_location

            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ ‚Äî –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ API
            from core.utils.util import get_ip_info

            ip_info = get_ip_info(client_ip, self.logger)
            city = ip_info.get("city", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            location = f"{city}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.cache_manager.set(self.CacheType.LOCATION, client_ip, location)
            return location
        except Exception as e:
            self.logger.bind(tag=TAG).error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {e}")
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def _get_weather_info(self, conn, location: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_weather = self.cache_manager.get(self.CacheType.WEATHER, location)
            if cached_weather is not None:
                return cached_weather

            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
            from plugins_func.functions.get_weather import get_weather
            from plugins_func.register import ActionResponse

            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_weather
            result = get_weather(conn, location=location, lang="zh_CN")
            if isinstance(result, ActionResponse):
                weather_report = result.result
                self.cache_manager.set(self.CacheType.WEATHER, location, weather_report)
                return weather_report
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"

        except Exception as e:
            self.logger.bind(tag=TAG).error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"

    def update_context_info(self, conn, client_ip: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–≥–æ–¥—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ API)
            local_address = self._get_location_info(client_ip)
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ API)
            self._get_weather_info(conn, local_address)
            self.logger.bind(tag=TAG).info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        except Exception as e:
            self.logger.bind(tag=TAG).error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

    def build_enhanced_prompt(
        self, user_prompt: str, device_id: str, client_ip: str = None
    ) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        if not self.base_prompt_template:
            return user_prompt

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
            today_date, today_weekday, lunar_date = self._get_current_time_info()

            # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            local_address = ""
            weather_info = ""

            if client_ip:
                # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
                local_address = (
                    self.cache_manager.get(self.CacheType.LOCATION, client_ip) or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                )

                # –ü–æ–≥–æ–¥–∞ –∏–∑ –∫—ç—à–∞
                if local_address:
                    weather_info = (
                        self.cache_manager.get(self.CacheType.WEATHER, local_address)
                        or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    )

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
            template = Template(self.base_prompt_template)
            enhanced_prompt = template.render(
                base_prompt=user_prompt,
                current_time="{{current_time}}",
                today_date=today_date,
                today_weekday=today_weekday,
                lunar_date=lunar_date,
                local_address=local_address,
                weather_info=weather_info,
                emojiList=EMOJI_List,
            )
            device_cache_key = f"device_prompt:{device_id}"
            self.cache_manager.set(
                self.CacheType.DEVICE_PROMPT, device_cache_key, enhanced_prompt
            )
            self.logger.bind(tag=TAG).info(
                f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(enhanced_prompt)}"
            )
            return enhanced_prompt

        except Exception as e:
            self.logger.bind(tag=TAG).error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return user_prompt